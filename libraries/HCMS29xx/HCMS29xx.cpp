
#include <HCMS29xx.h>
#include <bsp_clock.h>
extern "C" {
	#include <gpio.h>
}

/*** ASCII characters table ***/
static const uint8_t  AsciiTable[][5] = {
	{0x00, 0x00, 0x00, 0x00, 0x00},// (space)
	{0x00, 0x00, 0x5F, 0x00, 0x00},// !
	{0x00, 0x07, 0x00, 0x07, 0x00},// "
	{0x14, 0x7F, 0x14, 0x7F, 0x14},// #
	{0x24, 0x2A, 0x7F, 0x2A, 0x12},// $
	{0x23, 0x13, 0x08, 0x64, 0x62},// %
	{0x36, 0x49, 0x55, 0x22, 0x50},// &
	{0x00, 0x05, 0x03, 0x00, 0x00},// '
	{0x00, 0x1C, 0x22, 0x41, 0x00},// (
	{0x00, 0x41, 0x22, 0x1C, 0x00},// )
	{0x08, 0x2A, 0x1C, 0x2A, 0x08},// *
	{0x08, 0x08, 0x3E, 0x08, 0x08},// +
	{0x00, 0x50, 0x30, 0x00, 0x00},// ,
	{0x08, 0x08, 0x08, 0x08, 0x08},// -
	{0x00, 0x60, 0x60, 0x00, 0x00},// .
	{0x20, 0x10, 0x08, 0x04, 0x02},// /
	{0x3E, 0x51, 0x49, 0x45, 0x3E},// 0
	{0x00, 0x42, 0x7F, 0x40, 0x00},// 1
	{0x42, 0x61, 0x51, 0x49, 0x46},// 2
	{0x21, 0x41, 0x45, 0x4B, 0x31},// 3
	{0x18, 0x14, 0x12, 0x7F, 0x10},// 4
	{0x27, 0x45, 0x45, 0x45, 0x39},// 5
	{0x3C, 0x4A, 0x49, 0x49, 0x30},// 6
	{0x01, 0x71, 0x09, 0x05, 0x03},// 7
	{0x36, 0x49, 0x49, 0x49, 0x36},// 8
	{0x06, 0x49, 0x49, 0x29, 0x1E},// 9
	{0x00, 0x36, 0x36, 0x00, 0x00},// :
	{0x00, 0x56, 0x36, 0x00, 0x00},// ;
	{0x00, 0x08, 0x14, 0x22, 0x41},// <
	{0x14, 0x14, 0x14, 0x14, 0x14},// =
	{0x41, 0x22, 0x14, 0x08, 0x00},// >
	{0x02, 0x01, 0x51, 0x09, 0x06},// ?
	{0x32, 0x49, 0x79, 0x41, 0x3E},// @
	{0x7E, 0x11, 0x11, 0x11, 0x7E},// A
	{0x7F, 0x49, 0x49, 0x49, 0x36},// B
	{0x3E, 0x41, 0x41, 0x41, 0x22},// C
	{0x7F, 0x41, 0x41, 0x22, 0x1C},// D
	{0x7F, 0x49, 0x49, 0x49, 0x41},// E
	{0x7F, 0x09, 0x09, 0x01, 0x01},// F
	{0x3E, 0x41, 0x41, 0x51, 0x32},// G
	{0x7F, 0x08, 0x08, 0x08, 0x7F},// H
	{0x00, 0x41, 0x7F, 0x41, 0x00},// I
	{0x20, 0x40, 0x41, 0x3F, 0x01},// J
	{0x7F, 0x08, 0x14, 0x22, 0x41},// K
	{0x7F, 0x40, 0x40, 0x40, 0x40},// L
	{0x7F, 0x02, 0x04, 0x02, 0x7F},// M
	{0x7F, 0x04, 0x08, 0x10, 0x7F},// N
	{0x3E, 0x41, 0x41, 0x41, 0x3E},// O
	{0x7F, 0x09, 0x09, 0x09, 0x06},// P
	{0x3E, 0x41, 0x51, 0x21, 0x5E},// Q
	{0x7F, 0x09, 0x19, 0x29, 0x46},// R
	{0x46, 0x49, 0x49, 0x49, 0x31},// S
	{0x01, 0x01, 0x7F, 0x01, 0x01},// T
	{0x3F, 0x40, 0x40, 0x40, 0x3F},// U
	{0x1F, 0x20, 0x40, 0x20, 0x1F},// V
	{0x7F, 0x20, 0x18, 0x20, 0x7F},// W
	{0x63, 0x14, 0x08, 0x14, 0x63},// X
	{0x03, 0x04, 0x78, 0x04, 0x03},// Y
	{0x61, 0x51, 0x49, 0x45, 0x43},// Z
	{0x00, 0x00, 0x7F, 0x41, 0x41},// [
	{0x02, 0x04, 0x08, 0x10, 0x20},// '\'
	{0x41, 0x41, 0x7F, 0x00, 0x00},// ]
	{0x04, 0x02, 0x01, 0x02, 0x04},// ^
	{0x40, 0x40, 0x40, 0x40, 0x40},// _
	{0x00, 0x01, 0x02, 0x04, 0x00},// `
	{0x20, 0x54, 0x54, 0x54, 0x78},// a
	{0x7F, 0x48, 0x44, 0x44, 0x38},// b
	{0x38, 0x44, 0x44, 0x44, 0x20},// c
	{0x38, 0x44, 0x44, 0x48, 0x7F},// d
	{0x38, 0x54, 0x54, 0x54, 0x18},// e
	{0x08, 0x7E, 0x09, 0x01, 0x02},// f
	{0x08, 0x14, 0x54, 0x54, 0x3C},// g
	{0x7F, 0x08, 0x04, 0x04, 0x78},// h
	{0x00, 0x44, 0x7D, 0x40, 0x00},// i
	{0x20, 0x40, 0x44, 0x3D, 0x00},// j
	{0x00, 0x7F, 0x10, 0x28, 0x44},// k
	{0x00, 0x41, 0x7F, 0x40, 0x00},// l
	{0x7C, 0x04, 0x18, 0x04, 0x78},// m
	{0x7C, 0x08, 0x04, 0x04, 0x78},// n
	{0x38, 0x44, 0x44, 0x44, 0x38},// o
	{0x7C, 0x14, 0x14, 0x14, 0x08},// p
	{0x08, 0x14, 0x14, 0x18, 0x7C},// q
	{0x7C, 0x08, 0x04, 0x04, 0x08},// r
	{0x48, 0x54, 0x54, 0x54, 0x20},// s
	{0x04, 0x3F, 0x44, 0x40, 0x20},// t
	{0x3C, 0x40, 0x40, 0x20, 0x7C},// u
	{0x1C, 0x20, 0x40, 0x20, 0x1C},// v
	{0x3C, 0x40, 0x30, 0x40, 0x3C},// w
	{0x44, 0x28, 0x10, 0x28, 0x44},// x
	{0x0C, 0x50, 0x50, 0x50, 0x3C},// y
	{0x44, 0x64, 0x54, 0x4C, 0x44},// z
	{0x00, 0x08, 0x36, 0x41, 0x00},// {
	{0x00, 0x00, 0x7F, 0x00, 0x00},// |
	{0x00, 0x41, 0x36, 0x08, 0x00},// }
	{0x08, 0x08, 0x2A, 0x1C, 0x08} // ~
};

#define isvalidpin(pin)	((pin>=AVR32_PIN_PA00 && pin<=AVR32_PIN_PA22) || (pin>=AVR32_PIN_PB00 && pin<=AVR32_PIN_PB12))

#define DAT_LOW()		gpio_set_pin_low(datPin)
#define DAT_HIGH()		gpio_set_pin_high(datPin)
#define CLK_LOW()		gpio_set_pin_low(clkPin)
#define CLK_HIGH()		gpio_set_pin_high(clkPin)
#define RS_LOW()		gpio_set_pin_low(regPin)
#define RS_HIGH()		gpio_set_pin_high(regPin)
#define CE_LOW()		gpio_set_pin_low(cePin)
#define CE_HIGH()		gpio_set_pin_high(cePin)
#define RST_LOW()		gpio_set_pin_low(rstPin)
#define RST_HIGH()		gpio_set_pin_high(rstPin)

/*** HCMS 5x7 LEDs display ***/
#define COLS_PER_CHAR	5
/*** peak current level, HCMS-29xx Control World 0 [D5:D4] ***/
//#define PEAK_CURRENT	0b10	// 4.0mA
#define PEAK_CURRENT	0b01	// 6.4mA
//#define PEAK_CURRENT	0b00	// 9.3mA
//#define PEAK_CURRENT	0b11	//12.8mA

/*** relative brightness, HCMS-29xx Control World 0 [D3:D0] ***/
#define BRIGHTNESS		14		// 0 to 15

HCMS29xx::HCMS29xx() : datPin(0), clkPin(0), regPin(0), cePin(0), rstPin(0), dispLen(0)
{

}

bool HCMS29xx::begin(uint32_t dataPin, uint32_t clockPin, uint32_t registerSelectPin,
			uint32_t chipEnablePin, uint32_t resetPin, uint8_t displayLength, uint8_t peakCurrent, uint8_t brightness)
{
	if(!isvalidpin(dataPin)) return false;
	if(!isvalidpin(clockPin)) return false;
	if(!isvalidpin(registerSelectPin)) return false;
	if(!isvalidpin(chipEnablePin)) return false;
	if(!isvalidpin(resetPin)) return false;	
	if(displayLength!=4 && displayLength!=8) return false;
	if(peakCurrent>3) return false;
	if(brightness>15) return false;
	
	datPin = dataPin;
	clkPin = clockPin;
	regPin = registerSelectPin;
	cePin = chipEnablePin;
	rstPin = resetPin;
	dispLen = displayLength;
	
	/** controller pin directions (all outputs) **/
	gpio_configure_pin(datPin, GPIO_DIR_OUTPUT);
	gpio_configure_pin(clkPin, GPIO_DIR_OUTPUT);
	gpio_configure_pin(regPin, GPIO_DIR_OUTPUT);
	gpio_configure_pin(cePin, GPIO_DIR_OUTPUT);
	gpio_configure_pin(rstPin, GPIO_DIR_OUTPUT);
	
	/** reset the display **/
	RST_LOW();	CE_HIGH();
	DAT_LOW();	CLK_LOW();
	delay_ms(20);
	RST_HIGH();	// normal operation
	
	/** clear LEDs (optional) **/
	RS_LOW();	// select dot register
	CE_LOW();	// enable
	for(uint8_t col=0; col<(dispLen * COLS_PER_CHAR); col++)
		sendByte(0x00);	// fill dot register with 0's
	CE_HIGH();	// disable, latch data
	
	/** control register 0 **/
	RS_HIGH();	// select control register
	CE_LOW();	// enable
	// disable sleep mode | set peak current level | set relative brightness
	//sendByte( 0b01000000 | (PEAK_CURRENT<<4) | (BRIGHTNESS&0x0F) );
	sendByte( 0b01000000 | (peakCurrent<<4) | (brightness&0x0F) );
	CE_HIGH();	// disable, latch data
	
	/** control register 1 **/
	CE_LOW();	// enable
	sendByte(0b10000001);
	CE_HIGH();	// disable, latch data

	return true;
}

void HCMS29xx::displayMessage(const char *msg)
{
	uint8_t col, pos;
	RS_LOW();	// select dot register
	CE_LOW();	// enable
	for(pos=0; pos<dispLen; pos++){
		char ch = msg[pos];
		if( (ch<0x20) || (ch>0x7E) )	// 0x20 to 0x7E only
			ch = 0x20;	// replace with 'space' character
		for(col=0; col<COLS_PER_CHAR; col++){
			/** send a byte from the ASCII table **/
			sendByte(AsciiTable[ch-0x20][col]);
		}
	}
	CE_HIGH();	// disable and latch new data to dot register
}

void HCMS29xx::scrollMessage(const char *msg, size_t length, uint32_t scroll_delay)
{
	uint8_t pos;
	if(length<=dispLen)
		return;
	length -= dispLen;
	for(pos=0; pos<length; pos++){
		displayMessage( &msg[pos] );
		delay_ms(scroll_delay);	// scroll delay
	}
}

void HCMS29xx::sendByte(uint8_t data)
{
	uint8_t bit;
	// shift 8-bit data, MSB first
	for(bit=8; bit>0; bit--){
		if(data & 0x80) DAT_HIGH();
		else DAT_LOW();
		CLK_HIGH();
		delay_us(10);
		CLK_LOW();
		data = data<<1;
		delay_us(20);
	}
	// HCMS-29xx note: CLK must be low (and CE=high) to latch the new data
}
